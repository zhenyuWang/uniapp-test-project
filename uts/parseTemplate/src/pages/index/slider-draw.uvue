<template>
  <view ref="slider" class="slider" :style="{ height: sliderHeight + 'px' }" @touchstart="_onTouchStart" @touchmove="_onTouchMove" @touchend="_onTouchEnd">
    <text>{{ thumb_value }}</text>
  </view>
</template>

<script lang="ts">
import DrawableContext from 'io.dcloud.uniapp.runtime.DrawableContext'

const SLIDER_TRACK_HEIGHT = 2
const SLIDER_THUMB_SHADOW = 4
const SLIDER_VALUE_WIDTH = 30
const SLIDER_VALUE_FONT_SIZE = 14

export default {
  data() {
    return {
      sliderValue: 0,
      thumb_value: '',
      $sliderNode: null as null | INode,
      $sliderWidth: 0,
      $sliderTrackWidth: 0,
      $sliderOffsetX: 0,
      $touchStartFlag: false,
      $drawContext: null as null | DrawableContext,
    }
  },
  props: {
    name: {
      type: String,
      default: '',
    },
    min: {
      type: Number,
      default: 0,
    },
    max: {
      type: Number,
      default: 100,
    },
    value: {
      type: Number,
      default: 0,
    },
    step: {
      type: Number,
      default: 1,
    },
    disabled: {
      type: Boolean,
      default: false,
    },
    color: {
      type: String,
      default: '#888888',
    },
    backgroundColor: {
      type: String,
      default: '#e9e9e9',
    },
    activeColor: {
      type: String,
      default: '#007aff',
    },
    selectedColor: {
      type: String,
      default: '#007aff',
    },
    blockColor: {
      type: String,
      default: '#ffffff',
    },
    blockSize: {
      type: Number,
      default: 28,
    },
    showValue: {
      type: Boolean,
      default: false,
    },
  },
  computed: {
    sliderHeight(): number {
      return this.blockSize + SLIDER_THUMB_SHADOW * 2
    },
  },
  watch: {
    value(newVal) {
      if (this.sliderValue != newVal) {
        this.sliderValue = newVal
        this._onRender()
      }
    },
  },
  mounted() {
    this.$.$waitNativeRender(() => {
      this.$sliderNode = this.$refs.get('slider') as INode
      this.$drawContext = this.$sliderNode!.getDrawableContext()
      this.sliderValue = this.value
      this._onLayout()
      this._onRender()
    })
    this.$watch(
      (): any => [this.showValue, this.blockSize],
      () => {
        this._onLayout()
        this._onRender()
      }
    )
    this.$watch(
      (): any => [this.disabled, this.color, this.backgroundColor, this.activeColor, this.selectedColor, this.blockColor],
      () => {
        this._onRender()
      }
    )
  },
  methods: {
    _onTouchStart(e: TouchEvent) {
      if (!this.disabled && e.changedTouches.length === 1 && !this.$touchStartFlag) {
        this.$touchStartFlag = true
        e.preventDefault()
      }
    },
    _onTouchMove(e: TouchEvent) {
      if (!this.disabled && e.changedTouches.length === 1 && this.$touchStartFlag) {
        e.preventDefault()
        this._onTrackInputChange(e.changedTouches[0].screenX)
        this.$emit('changing', new SliderChangeEvent(this.sliderValue))
      }
    },
    _onTouchEnd(e: TouchEvent) {
      if (!this.disabled && this.$touchStartFlag) {
        this.$touchStartFlag = false
        this._onTrackInputChange(e.changedTouches[0].screenX)
        this.$emit('change', new SliderChangeEvent(this.sliderValue))
      }
    },
    _onTrackInputChange(x: number) {
      let px = x - this.$sliderOffsetX
      if (px < 0) {
        px = 0
      }
      if (px > this.$sliderTrackWidth) {
        px = this.$sliderTrackWidth
      }

      let value = this.min + (this.max - this.min) * (px / this.$sliderTrackWidth)
      if (this.step > 0 && (value % this.step) / this.step !== 0) {
        value -= value % this.step
      }

      this.sliderValue = parseInt('' + value)

      this._onRender()
    },
    _onLayout() {
      this.$sliderWidth = this.$sliderNode?.offsetWidth as number
      this.$sliderOffsetX = (this.$sliderNode?.offsetLeft as number) + this.blockSize / 2
      this.$sliderTrackWidth = this.showValue ? this.$sliderWidth - this.blockSize - SLIDER_VALUE_WIDTH : this.$sliderWidth - this.blockSize
    },
    _onRender() {
      console.log('_onRender', this.sliderValue)

      this.$drawContext!.reset()

      const radius = this.blockSize / 2
      const center = SLIDER_THUMB_SHADOW + radius
      const value_width = radius + this.$sliderTrackWidth * this._getValuePercentage()
      this.thumb_value = `s_v${this.sliderValue},t_l=${value_width},t_w=${this.$sliderTrackWidth},P=${this._getValuePercentage()},max=${this.max},min=${this.min}`

      // track background
      let line_bg_x = value_width + radius
      let line_bg_y = center
      let line_bg_w = this.$sliderTrackWidth - value_width
      let line_bg_h = SLIDER_TRACK_HEIGHT
      if (line_bg_w > 0) {
        this.$drawContext!.fillStyle = this.backgroundColor
        this.$drawContext!.fillRect(line_bg_x, line_bg_y, line_bg_w, line_bg_h)
      }

      // track foreground
      let line_fg_x = radius
      let line_fg_y = center
      let line_fg_w = value_width - this.blockSize
      let line_fg_h = SLIDER_TRACK_HEIGHT
      if (line_fg_w > 0) {
        this.$drawContext!.fillStyle = this.activeColor
        this.$drawContext!.fillRect(line_fg_x, line_fg_y, line_fg_w, line_fg_h)
      }

      // thumb
      this.$drawContext!.fillStyle = this.blockColor
      this.$drawContext!.arc(value_width, center, radius, 0, 2 * Math.PI)
      this.$drawContext!.fill()

      // thumb shadow
      this.$drawContext!.lineWidth = 1
      for (let i = 0; i < SLIDER_THUMB_SHADOW; i++) {
        this.$drawContext!.strokeStyle = `rgba(100,100,100,0.0${4 - i})`
        this.$drawContext!.beginPath()
        this.$drawContext!.arc(value_width, center, radius + i, 0, 2 * Math.PI)
        this.$drawContext!.stroke()
      }

      // value
      if (this.showValue) {
        this.$drawContext!.font = SLIDER_VALUE_FONT_SIZE + 'px'
        this.$drawContext!.fillStyle = this.color
        this.$drawContext!.fillText(this.sliderValue.toString(), this.$sliderTrackWidth + this.blockSize, center + SLIDER_VALUE_FONT_SIZE / 2 - 1)
      }

      this.$drawContext!.update()
    },
    _getValuePercentage(): number {
      println('this.sliderValue' + this.sliderValue + typeof this.sliderValue)
      println('this.min' + this.min + typeof this.min)
      println('this.max' + this.max + typeof this.max)
      // let value = parseInt(this.sliderValue + '')
      let value = this.sliderValue
      println('value' + value + typeof value)
      if (value < this.min) {
        value = this.min
      }
      if (value > this.max) {
        value = this.max
      }
      const num1 = value - this.min
      const num2 = this.max - this.min
      println('num1' + num1 + typeof num1)
      println('num2' + num2 + typeof num2)
      // const result = num1.toFloat() / num2.toFloat()
      const result = num1 / num2
      // const result = (value - this.min) / (this.max - this.min)
      // println('result',result, typeof result)
      println('result' + result)
      return result
    },
  },
}
</script>
