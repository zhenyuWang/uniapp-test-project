<template>
  <view class="index-box">
    <text class="bg-blue" @click="test">this is index title: {{ title }}</text>
    <text class="bg-blue">next bg blue</text>
    <text style="background-color: blue" id="my-id">test my id</text>
    <input
      style="background-color: red"
      class="my-input"
      type="text"
      v-model="title"
    />
    <navigator url="/pages/detail/index">go detail</navigator>
    <view class="my-view" type="my-type">
      <text>this is my view</text>
    </view>
    <button type="primary" class="my-button" @click="getElement">
      getElement
    </button>
    <button type="primary" @click="back">back</button>
    <rich-text
      :nodes="[{'name':'div','attrs':{'class':'div-class','style':'line-height: 60px; color: red; text-align:center;'},'children':[{'type':'text','text':'Hello&nbsp;uni-app 1111111'}]}]"
    />
    <rich-text
      :nodes="[
        {
          'name': 'div',
          'attrs': {
            'class': 'div-class',
            'style': 'line-height: 60px; color: red; text-align:center;'
          },
          'children': [
            { 'type': 'text', 'text': 'Hello&nbsp;this is v-bind nodes array!' }
          ]
        }
      ]"
    />
    <rich-text :nodes="nodesStr" />
    <rich-text :nodes="nodes" />
    <text @click="(e: any) => myClick(e)">test click params with type</text>
    <text class="testFont">自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字自定义字体文字EnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglish</text>
    <text>默认字体文字</text>
    <!-- <view class="block" style="height: 1000px; background: red"></view> -->
    <!-- <button @click="showLoading">showLoading</button>
    <button @click="showToast">showToast</button> -->
    <text :style="{
      color: red,
      fontSize: '20px',
    }">style with not empty {}</text>
    <text :style="{
    }">style with empty {}</text>
  </view>
</template>

<script>
type Attrs = {
  class: string
  style: string
}
type Child = {
  type: string
  text: string
}
type Node = {
  name: string
  attrs: Attrs
  children: Child[]
}
export default {
  data() {
    return {
      title: 'index title',
      red: 'red',
      nodesStr: "[{'name':'div','attrs':{'class':'div-class','style':'line-height: 60px; color: red; text-align:center;'},'children':[{'type':'text','text':'Hello&nbsp;uni-app 22222'}]}]",
      nodes: [{
        name: 'div',
        attrs: {
          class: 'div-class',
          style: 'line-height: 60px; color: yellow;text-align: center;'
        } as Attrs,
        children: [
          {
            type: 'text',
            text: 'hello uni-app 3333'
          } as Child
        ]
      } as Node]
    }
  },
  onLoad() {
    println('Page index onLoad')
    const pages = getCurrentPages()
    println(pages)
    const launchOptions = uni.getLaunchOptionsSync()
    println(launchOptions.path)
    // uni.loadFontFace({
    //     global: true,
    //     family: 'AlimamaDaoLiTi',
    //     source: 'https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf',
    //     success() {
    //       println('loadFontFace success')
    //     },
    //     fail(err: any) {
    //       println('loadFontFace fail')
    //       println(err)
    //     }
    //   })
  },
  onShow() {
    println('Page index onShow')
  },
  onReady() {
    println('Page index onReady')
  },
  onPageScroll(options) {
    println('Page index onPageScroll')
    println(options.scrollTop)
  },
  onReachBottom() {
    println('Page index onReachBottom')
  },
  onHide() {
    println('Page index onHide')
  },
  methods: {
    myClick(e: any) {
      println('myClick-------------------------')
      println(e)
    },
    // showLoading() {
    //   uni.showLoading({
    //     title: 'loading in index'
    //   })
    // },
    // showToast() {
    //   uni.showToast({
    //     title: 'toast in index',
	  //     duration: 20000
    //   })
    // },
    getElement() {
      uni.navigateTo({
        url: '/pages/detail/index?name=testname',
        // url: './../detail/index',
        // url: '../detail/index',
        // url: '../detail/index',
        // url: '/pages/detail/index',
        complete(res) {
          println('navigateTo complete')
          println(res.errMsg)
        }
      })
      // uni.navigateTo({
      //   url: '/pages/detail/index',
      //   complete(res) {
      //     println('navigateTo complete')
      //     println(res.errMsg)
      //   }
      // })
      // uni.navigateTo({
      //   url: '/pages/detail/index',
      //   complete(res) {
      //     println('navigateTo complete')
      //     println(res.errMsg)
      //   }
      // })
      // uni.startPullDownRefresh({
      //   success() {
      //     println('startPullDownRefresh start')
      //   },
      // })
      // const page = getCurrentPages()[0]
      // println(page)
      // uni.loadFontFace({
      //   global: true,
      //   family: 'AlimamaDaoLiTi',
      //   // source: 'https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf',
      //   // source: 'https://native-res123.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf',
      //   // source: 'url("https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf")',
      //   // source: 'url(https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf)',
      //   // source: '/static/font/AlimamaDaoLiTi123.ttf',
      //   // source: '/static/font/AlimamaDaoLiTi.ttf',
      //   // source: 'url("/static/font/AlimamaDaoLiTi.ttf")',
      //   // source: 'url(/static/font/AlimamaDaoLiTi.ttf)',
      //   source: ' url("/static/font/AlimamaDaoLiTi.ttf") ',
      //   success(res) {
      //     println('loadFontFace success')
      //   },
      //   fail(err) {
      //     println('loadFontFace fail')
      //     println(err.errMsg)
      //   },
      //   complete(res) {
      //     println('loadFontFace complete')
      //   }
      // })
      // uni.pageScrollTo({
      //   scrollTop: 100,
      //   duration: 300,
      //   fail(error: PageScrollToFail) {
      //     println('pageScrollTo fail')
      //     println(error.errMsg)
      //   }
      // });
      // const launchOptions = uni.getLaunchOptionsSync()
      // println(launchOptions)
      // println(launchOptions.path)
      // const pages = getCurrentPages()
      // println(pages)

      // const appPage = pages[0].$getAppPage()
      // println(appPage)
      // appPage!.close(new Map<string, any | null>([["animationType", "none"]]))
      // const subTree = this.$.subTree
      // const children = subTree.children
      // if (children !== null && (children as any[]).length > 0) {
      //   const child = children[1]
      //   println('1111')
      // }
      // const baseApp = getBaseApp()
      // println(baseApp)
      // const app = getApp()
      // println(app)
      // app.quit()
      // const currentPages = getCurrentPages()
      // println(currentPages)
      // uni.navigateTo({
      //   url: '/pages/detail/index123123'
      // })
      // const myView = this.$querySelector('.my-view')
      // println(myView)
      // const myButton = this.$querySelector('.my-button')
      // println(myButton)
      // const children = this.$children
      // println(children)
      // const element = this.$querySelector('#my-id')
      // const width = element?.offsetWidth
      // println(width)
      // const elementId = element!.id
      // const _element = this.$innerPage!.document.getElementById(elementId)
      // const text = _element!.getAttribute("value")
      // println(text)
      // const nodes = this.$querySelectorAll('.bg-blue')
      // const node = this.$querySelector('Text')
      // const bgBlue = this.$querySelector('.bg-blue')
      // println('getElement')
      // let componentFoo: ComponentPublicInstance | null = null
      // const children = this.$children
      // children.forEach((child) => {
      //   if (child.$options.name == 'Foo') {
      //     componentFoo = child
      //   }
      // })
      // const dom = componentFoo?.$el
      // println(dom?.offsetWidth)
      // println(dom?.offsetHeight)

      // componentFoo?.$callMethod('fooTest')

      // const myInput = this.$querySelector('.my-input')
      // myInput!.dispatchEvent('input', MouseEvent('input', 'test input'))
      // const value = myInput!.getAttribute('value')
      // println(value)
      // const componentFoo = this.$querySelector('Foo')
      // println(componentFoo)
    },
    test() {
      println('test')
    },
    back() {
      uni.navigateBack({
        success() {
          println('---------navigateBack success in detail')
        },
        fail(e) {
          println('---------navigateBack fail in detail')
          println(e.errMsg)
        },
        complete(e) {
          println('---------navigateBack complete in detail')
          println(e.errMsg)
        }
      })
    },
  },
}
// 'AlimamaDaoLiTi',
// https://native-res123.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf
// url("https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf")
// url(https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf)
// /static/font/AlimamaDaoLiTi123.ttf
</script>

<style>
@font-face {
  font-family: AlimamaDaoLiTi;
  src: url('https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf');
}
.my-input {
  color: #fff;
}
.testFont {
  font-family: AlimamaDaoLiTi;
}
</style>
