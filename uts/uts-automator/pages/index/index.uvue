<template>
	<scroll-view class="content">
		<todo-list>
			<template v-slot:default="slotProps">
				<view class="green">{{ slotProps.item }}</view>
			</template>
		</todo-list>
		<input ref='myInput' value="123" :focus="true" />
		<button @click="test1();test2()">test1 & test2</button>
		<rich-text :nodes="nodes"></rich-text>
		<view :style="[style1, style2]">{{ fnName.split('').join('') }}</view>
		<view>{{ showFoo ? title : fnName }}</view>
		<swiper class="swiper" style="width:100%;height:100px;background-color: aquamarine;" circular>
			<swiper-item>
				<view ref='test' class="swiper-item uni-bg-red">A</view>
			</swiper-item>
			<swiper-item>
				<view ref='test' class="swiper-item uni-bg-green">B</view>
			</swiper-item>
			<swiper-item>
				<view ref='test' class="swiper-item uni-bg-blue">C</view>
			</swiper-item>
		</swiper>
		<slider class="slider" :value="60" :step="5" />
		<view class="testTouch" style="width: 100px;height: 2000px;border: 1px solid red;"></view>
		<!-- 		<button @click="test2">test2</button>
		<button @click="reLaunchDetail">relaunch detail</button>
		<text class="testFont">自定义字体内容1</text>
		<checkbox-group class="uni-flex uni-row checkbox-group">
			<checkbox value="cb1" :checked="true" style="margin-right: 30rpx;" class="checkbox test-checkbox1">1111</checkbox>
			<checkbox value="cb" class="checkbox test-checkbox2">未选中</checkbox>
		</checkbox-group>
		<progress :percent="20" :stroke-width="3" class="progress p1" />
		<view class="my-test" @click="automatorTap" @longpress="automatorLongpress" @touchstart="automatorTouchStart"
			@touchmove="automatorTouchMove" @touchend="automatorTouchEnd">
			<text>my-test1</text>
			<text class="test-child">{{title}}</text>
			<text class="test-child">my-test-child2</text>
			<view class="test-view">{{title}}</view>
			<button type="primary" class="test-button">{{title}}</button>
			<input class="my-input" style="background-color: yellow;margin-left:10px;" type="text" v-model="title" />
		</view> -->
		<Foo v-if="showFoo" test="foo-test-attribute" class="component-foo" @click="automatorTap"
			@longpress="automatorComponentLongpress" />
		<button @click="goDetail('aaa')">goDetail</button>
		<!-- 		<image class="logo" src="/static/logo.png"></image>
		<list-view>
			<list-item>111</list-item>
			<list-item>222</list-item>
		</list-view>
		<uni-test>uni-test</uni-test> -->
		<!-- <movable-area style='width:300px;height:400px;background: red;'>
			<movable-view style="width:30px;height: 30px;background-color: aqua"></movable-view>
		</movable-area> -->
	</scroll-view>
</template>
<script lang="ts">
	import { JSONArray } from 'com.alibaba.fastjson'
	import TodoList from '../../components/TodoList.uvue'
	type Msg = {
		id: string,
		method: string,
		params: any
	}
	type CallUniMethodParams = {
		method : string
		args : JSONArray
	}
	type GetDataParams = {
		pageId : string
		path ?: string | null
	}
	export default {
		components: { TodoList },
		data() {
			return {
				num: 10,
				title: '111',
				fnName: 'getStorageInfo',
				showFoo: true,
				style1: {
					background: 'green'
				},
				style2: {
					border: '1px solid red'
				},
				nodes: [{
					name: 'div',
					attrs: {
						class: 'div-class',
						style: 'line-height: 60px; color: red; text-align:center;'
					},
					children: [{
						type: 'text',
						text: 'Hello&nbsp;uni-app111!'
					}, {
						type: 'text',
						text: 'Hello&nbsp;uni-app222!'
					}]
				}],
			}
		},
		onReady() {
			const myInput = this.$refs["myInput"] as Element
			console.log('myInput',myInput)
			console.log(myInput.getAttribute('focus'))
			console.log(typeof myInput.getAttribute('focus'))
			console.log(myInput.getAttribute('value'))
			console.log(myInput.focus)
			console.log(myInput.value)
			// console.warn('onReady start')
			// const msg = `{"id":"6fd6ca73-c313-48ac-ad30-87ff4eba2be8","method":"App.callUniMethod","params":{"method":"reLaunch","args":[{"url":"/pages/index/index"}]}}`
			// const json = JSON.parse<Msg>(msg)!
			// console.warn('json', json)
			// const paramsStr = JSON.stringify(json.params)
			// console.warn('paramsStr', paramsStr)
			// const params = JSON.parse<CallUniMethodParams>(paramsStr)!
			
			// const testList = this.$refs.get('test') as Element
			// console.log('testList', testList)
			// const pages = getCurrentPages()
			// const page = pages[pages.length-1]
			// page.$viewToTempFilePath({
			// 	id: null,
			// 	wholeContent: false,
			// 	path: null,
			// 	complete(res){
			// 		console.log('res',res)
			// 	}
			// })
			
			// const arr1 = this.fnName.split('')
			// console.warn('arr1', arr1)
			// console.warn('isArray arr1', Array.isArray(arr1))
			// const arr2 = arr1.reverse()
			// console.warn('arr2', arr2)
			// console.warn('isArray arr2', Array.isArray(arr2))
			// const res = new Map<string, any | null>([['id', 'abc']])
			// const result = {
			// 	"elements": [
			// 		{
			// 			"tagName": "view",
			// 			"elementId": "6"
			// 		},
			// 		{
			// 			"tagName": "view",
			// 			"elementId": "11"
			// 		},
			// 		{
			// 			"tagName": "view",
			// 			"elementId": "16"
			// 		},
			// 		{
			// 			"tagName": "view",
			// 			"elementId": "21"
			// 		}
			// 	] as UTSJSONObject[]
			// }
			// res.set('result', result)
			// console.warn('res', res)
			// const fileManager = uni.getFileSystemManager()
			// console.warn('fileManager', fileManager)
			// fileManager.readFile({
			// 	encoding: 'base64',
			// 	filePath: '/static/logo.png',
			// 	success(readFileRes) {
			// 		console.warn(readFileRes)
			// 	},
			// 	fail(error){
			// 		console.warn(error)
			// 	}
			// } as ReadFileOptions)
			// uni.loadFontFace({
			// 	// global: true,
			// 	family: 'AlimamaDaoLiTi',
			// 	source: 'https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf',
			// 	// source: 'https://native-res123.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf',
			// 	// source: 'url("https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf")',
			// 	// source: 'url(https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf)',
			// 	// source: '/static/font/AlimamaDaoLiTi123.ttf',
			// 	// source: '/static/font/AlimamaDaoLiTi.ttf',
			// 	// source: 'url("/static/font/AlimamaDaoLiTi.ttf")',
			// 	// source: 'url(/static/font/AlimamaDaoLiTi.ttf)',
			// 	// source: ' url("/static/font/AlimamaDaoLiTi.ttf") ',
			// 	success() {
			// 		println('loadFontFace success')
			// 	},
			// 	fail(err) {
			// 		println('loadFontFace fail')
			// 		println(err.errMsg)
			// 	},
			// 	complete() {
			// 		println('loadFontFace complete')
			// 	}
			// })

			// const socketTask = uni.connectSocket({
			// 	url: 'ws://192.168.31.70:8080',
			// 	// url: 'ws://192.168.12.106:8080/ws',
			// 	success(res) {
			// 		console.warn('connectSocket success', res)
			// 	},
			// 	fail(err) {
			// 		console.warn('connectSocket fail', err)
			// 	}
			// })

			// socketTask.onOpen((res : OnSocketOpenCallbackResult) => {
			// 	console.warn('socketTask.onOpen', res)
			// 	socketTask.send({
			// 		data: 'data from index.uvue'
			// 	} as SendSocketMessageOptions)
			// 	socketTask.onMessage((res) => {
			// 		console.warn('socketTask.onMessage', res)
			// 	})
			// })
			// const res = uni.clearStorageSync()
			// console.warn('res',res)
			// const pages = getCurrentPages();
			// console.log('pages',pages)
			// uni.setStorage({
			// 	key: 'storage_key1',
			// 	data: 'hello',
			// 	success(res) {
			// 		console.log('setStorage success', res)
			// 	}
			// })
			// uni.getSystemInfo({
			// 	complete(res){
			// 		console.log('getSystemInfo complete', res)
			// 	}
			// })
			// const result = uni.getDeviceInfo()
			// console.log('getDeviceInfo', result);
			// const result = uni.getSystemSetting()
			// console.log('getSystemSetting', result);
			// const result = uni.getAppAuthorizeSetting()
			// console.log('getAppAuthorizeSetting', result);

			// uni.setStorage({
			// 	key: 'storage_key',
			// 	data: 'hello',
			// 	success: function() {
			// 		console.log('setStorage success');
			// 		let data = uni.getStorageSync('storage_key')
			// 		console.log('storage_key data', data)
			// 		uni.removeStorageSync('storage_key')
			// 		data = uni.getStorageSync('storage_key')
			// 		console.log('storage_key data', data)
			// 		// uni.clearStorage()
			// 		// setTimeout(() => {
			// 		// 	data = uni.getStorageSync('storage_key')
			// 		// 	console.log('storage_key data',data)
			// 		// }, 1000)
			// 	}
			// });

			// const socketTask = uni.connectSocket({
			// 	// url: 'ws://192.168.31.119:8080',
			// 	url: 'ws://192.168.12.106:8080/ws',
			// 	success(res) {
			// 		console.warn('connectSocket success', res)
			// 	},
			// 	fail(err) {
			// 		console.warn('connectSocket fail', err)
			// 	}
			// })
			// console.warn('socketTask', socketTask)
			// socketTask.onOpen(res => {
			// 	console.log('socketTask.onOpen', res)
			// })
			// uni.clearStorage({
			// 	success(res: any){
			// 		console.log('clearStorage success', res);
			// 	},
			// 	fail(res: any){
			// 		console.log('clearStorage fail', res);
			// 	},
			// })
		},
		methods: {
			onTouchMove(e : TouchEvent) {
				console.warn('e.touches[0]', e.touches[0])
			},
			reLaunchDetail() {
				uni.reLaunch({
					url: '/pages/detail/detail'
				})
			},
			automatorTap() {
				console.warn('automatorTap')
				this.title = 'automatorTap'
			},
			automatorLongpress() {
				console.warn('automatorLongpress')
			},
			automatorComponentLongpress() {
				console.warn('automatorComponentLongpress')
			},
			automatorTouchStart() {
				console.warn('automatorTouchStart')
			},
			automatorTouchMove() {
				console.warn('automatorTouchMove')
			},
			automatorTouchEnd(e : TouchEvent) {
				console.warn('automatorTouchEnd', e)
			},
			test() {
				uni.showActionSheet({
					itemList: ['A', 'B', 'C'],
					success: function (res) {
						console.log('showActionSheet success', res);
					},
					fail: function (res) {
						console.log(res.errMsg);
					}
				});
				// console.log('test in index')
				// this.$callMethod('myTest')
				const node = this.$querySelector('.my-test')
				console.warn('node', node)
				// const child = node.$querySelector('.test-child')
				// console.warn('child',child)
				// const fn = findVueMethod(this.$.type, this.fnName, this)
				// console.warn('fn=====================',fn == null)
			},
			getStorageInfo() {
				console.warn('method getStorageInfo')
			},
			myTest() : number {
				const sum = 2
				console.warn('my test--------------------------', sum);
				return sum;
			},
			goDetail(msg : string) {
				// uni.showLoading({ title: 'loading title in index' })
				console.log('msg', msg)
				uni.navigateTo({
					url: '/pages/detail/detail?name=test'
				})
			},
			test1() {
				uni.reLaunch({
					url: '/pages/index/index'
				})
				// this.showFoo = false
				// const num1: number = -1.1 / 1
				// const num2: number = -1.1 / 0.1
				// const num3: number = -1.1 / -0.1
				// console.warn(num1)
				// console.warn(num2)
				// console.warn(num3)
				// const msg = `{"id":"3be2c600-894c-4231-aa56-82fd989cc961", "method": "test", "params": {"method": "pageScrollTo", "args": [{"scrollTop":2000,"duration":0}]}}`
				// const msg = `{"id":"4aad03c3-ace8-4ad5-ba6f-f99ef3e59a69","method":"Page.getData","params":{"pageId":"3"}}`
				// const json = JSON.parse<Msg>(msg)!
				// const paramsStr = JSON.stringify(json.params)
				// // const params = JSON.parse<CallUniMethodParams>(paramsStr)!
				// const params = JSON.parse<GetDataParams>(paramsStr)!
				// console.warn('params',params)
				// const args = params.args
				// const argStr = JSON.stringify(args[0])
				// console.warn('argStr',argStr)
				// const arg = JSON.parse<Map<string, number>>(argStr)!
				// console.warn('arg',arg)
				// console.log('test1')
				// const arr = ['aaa', 'bbb', 'ccc']
				// const arr2 = JSON.parse<string[]>(JSON.stringify(arr))
				// console.warn('arr2', arr2)
			},
			test2() {
				// const num1: number = -1.1 / -0.1
				// console.warn(num1)
				console.log('test2')
			}
		}
	}
</script>
<style>
	.testFont {
		font-family: AlimamaDaoLiTi;
	}

	.component-foo {
		color: red;
	}

	.my-input {
		color: red;
		padding-left: 20px;
	}

	.border-0 {
		border: 100px dotted red;
	}

	.border-1 {
		border: 100px dotted #66ccff;
	}

	.border-2 {
		border: 100px dotted rgb(255, 0, 0);
	}

	.border-3 {
		border: 100px dotted rgba(255, 0, 0, 0.8);
	}

	.border-4 {
		border: 100px dashed red;
	}

	.border-5 {
		border: 100px dashed #66ccff;
	}

	.border-6 {
		border: 100px dashed rgb(255, 0, 0);
	}

	.border-7 {
		border: 100px dashed rgba(255, 0, 0, 0.8);
	}

	.border-8 {
		border: 100px solid red;
	}

	.border-9 {
		border: 100px solid #66ccff;
	}

	.border-10 {
		border: 100px solid rgb(255, 0, 0);
	}

	.border-11 {
		border: 100px solid rgba(255, 0, 0, 0.8);
	}

	.border-12 {
		border: 85rpx dotted red;
	}

	.border-13 {
		border: 85rpx dotted #66ccff;
	}

	.border-14 {
		border: 85rpx dotted rgb(255, 0, 0);
	}

	.border-15 {
		border: 85rpx dotted rgba(255, 0, 0, 0.8);
	}

	.border-16 {
		border: 85rpx dashed red;
	}

	.border-17 {
		border: 85rpx dashed #66ccff;
	}

	.border-18 {
		border: 85rpx dashed rgb(255, 0, 0);
	}

	.border-19 {
		border: 85rpx dashed rgba(255, 0, 0, 0.8);
	}

	.border-20 {
		border: 85rpx solid red;
	}

	.border-21 {
		border: 85rpx solid #66ccff;
	}

	.border-22 {
		border: 85rpx solid rgb(255, 0, 0);
	}

	.border-23 {
		border: 85rpx solid rgba(255, 0, 0, 0.8);
	}

	.border-24 {
		border: 20px dotted red;
	}

	.border-25 {
		border: 20px dotted #66ccff;
	}

	.border-26 {
		border: 20px dotted rgb(255, 0, 0);
	}

	.border-27 {
		border: 20px dotted rgba(255, 0, 0, 0.8);
	}

	.border-28 {
		border: 20px dashed red;
	}

	.border-29 {
		border: 20px dashed #66ccff;
	}

	.border-30 {
		border: 20px dashed rgb(255, 0, 0);
	}

	.border-31 {
		border: 20px dashed rgba(255, 0, 0, 0.8);
	}

	.border-32 {
		border: 20px solid red;
	}

	.border-33 {
		border: 20px solid #66ccff;
	}

	.border-34 {
		border: 20px solid rgb(255, 0, 0);
	}

	.border-35 {
		border: 20px solid rgba(255, 0, 0, 0.8);
	}
</style>