<template>
	<view class="content">
		<text class="testFont">自定义字体内容</text>
		<button @click="goDetail">goDetail</button>
		<checkbox-group class="uni-flex uni-row checkbox-group">
			<checkbox value="cb1" :checked="true" style="margin-right: 30rpx;" class="checkbox test-checkbox1">1111</checkbox>
			<checkbox value="cb" class="checkbox test-checkbox2">未选中</checkbox>
		</checkbox-group>
		<progress :percent="20" :stroke-width="3" class="progress p1" />
		<view class="my-test" @click="automatorTap" @longpress="automatorLongpress" @touchstart="automatorTouchStart"
			@touchmove="automatorTouchMove" @touchend="automatorTouchEnd">
			<text>my-test1</text>
			<text class="test-child">{{title}}</text>
			<text class="test-child">my-test-child2</text>
			<view class="test-view">{{title}}</view>
			<button type="primary" class="test-button">{{title}}</button>
			<input class="my-input" style="background-color: yellow;margin-left:10px;" type="text" v-model="title" />
		</view>
		<Foo test="foo-test-attribute" class="component-foo" @click="automatorTap"
			@longpress="automatorComponentLongpress" />
		<image class="logo" src="/static/logo.png"></image>
		<view class="border-0">index-index-index2222</view>
		<view class="border-0" @click="test">index-index-index {{ title }}</view>
		<view class="border-0">测试节点</view>
		<view class="border-1">测试节点</view>
		<view class="border-2">测试节点</view>
		<view class="border-3">测试节点</view>
		<view class="border-4">测试节点</view>
		<view class="border-5">测试节点</view>
		<view class="border-6">测试节点</view>
		<view class="border-7">测试节点</view>
		<view class="border-8">测试节点</view>
		<view class="border-9">测试节点</view>
		<view class="border-10">测试节点</view>
		<view class="border-11">测试节点</view>
		<view class="border-12">测试节点</view>
		<view class="border-13">测试节点</view>
		<view class="border-14">测试节点</view>
		<view class="border-15">测试节点</view>
		<view class="border-16">测试节点</view>
		<view class="border-17">测试节点</view>
		<view class="border-18">测试节点</view>
		<view class="border-19">测试节点</view>
		<view class="border-20">测试节点</view>
		<view class="border-21">测试节点</view>
		<view class="border-22">测试节点</view>
		<view class="border-23">测试节点</view>
		<view class="border-24">测试节点</view>
		<view class="border-25">测试节点</view>
		<view class="border-26">测试节点</view>
		<view class="border-27">测试节点</view>
		<view class="border-28">测试节点</view>
		<view class="border-29">测试节点</view>
		<view class="border-30">测试节点</view>
		<view class="border-31">测试节点</view>
		<view class="border-32">测试节点</view>
		<view class="border-33">测试节点</view>
		<view class="border-34">测试节点</view>
		<view class="border-35">测试节点</view>
		<list>
			<cell>111</cell>
			<cell>222</cell>
		</list>
	</view>
</template>
<script>
	import Foo from '../../components/Foo.uvue'
	export default {
		components: {
			Foo
		},
		data() {
			return {
				title: '111',
				fnName: 'getStorageInfo'
			}
		},
		onReady() {
			// const socketTask = uni.connectSocket({
			// 	url: 'ws://192.168.0.110:8080',
			// 	// url: 'ws://192.168.12.106:8080/ws',
			// 	success(res) {
			// 		console.warn('connectSocket success', res)
			// 	},
			// 	fail(err) {
			// 		console.warn('connectSocket fail', err)
			// 	}
			// })

			// socketTask.onOpen((res : OnSocketOpenCallbackResult) => {
			// 	console.warn('socketTask.onOpen', res)
			// 	socketTask.send({
			// 		data: 'data from index.uvue'
			// 	} as SendSocketMessageOptions)
			// 	socketTask.close({
			// 		code: 1000,
			// 		reason: 'close reason from client',
			// 		success(res : any) {
			// 			console.log('uni.closeSocket success', res)
			// 		},
			// 		fail(err : any) {
			// 			console.log('uni.closeSocket fail', err)
			// 		}
			// 	} as CloseSocketOptions)
			// })

			// const res = uni.clearStorageSync()
			// console.warn('res',res)
			// const pages = getCurrentPages();
			// console.log('pages',pages)
			// uni.setStorage({
			// 	key: 'storage_key1',
			// 	data: 'hello',
			// 	success(res) {
			// 		console.log('setStorage success', res)
			// 	}
			// })
			// uni.getSystemInfo({
			// 	complete(res){
			// 		console.log('getSystemInfo complete', res)
			// 	}
			// })
			// const result = uni.getDeviceInfo()
			// console.log('getDeviceInfo', result);
			// const result = uni.getSystemSetting()
			// console.log('getSystemSetting', result);
			// const result = uni.getAppAuthorizeSetting()
			// console.log('getAppAuthorizeSetting', result);

			// uni.setStorage({
			// 	key: 'storage_key',
			// 	data: 'hello',
			// 	success: function() {
			// 		console.log('setStorage success');
			// 		let data = uni.getStorageSync('storage_key')
			// 		console.log('storage_key data', data)
			// 		uni.removeStorageSync('storage_key')
			// 		data = uni.getStorageSync('storage_key')
			// 		console.log('storage_key data', data)
			// 		// uni.clearStorage()
			// 		// setTimeout(() => {
			// 		// 	data = uni.getStorageSync('storage_key')
			// 		// 	console.log('storage_key data',data)
			// 		// }, 1000)
			// 	}
			// });

			// const socketTask = uni.connectSocket({
			// 	// url: 'ws://192.168.31.119:8080',
			// 	url: 'ws://192.168.12.106:8080/ws',
			// 	success(res) {
			// 		console.warn('connectSocket success', res)
			// 	},
			// 	fail(err) {
			// 		console.warn('connectSocket fail', err)
			// 	}
			// })
			// console.warn('socketTask', socketTask)
			// socketTask.onOpen(res => {
			// 	console.log('socketTask.onOpen', res)
			// })
			// uni.clearStorage({
			// 	success(res: any){
			// 		console.log('clearStorage success', res);
			// 	},
			// 	fail(res: any){
			// 		console.log('clearStorage fail', res);
			// 	},
			// })
		},
		methods: {
			automatorTap() {
				console.warn('automatorTap')
				this.title = 'automatorTap'
			},
			automatorLongpress() {
				console.warn('automatorLongpress')
			},
			automatorComponentLongpress() {
				console.warn('automatorComponentLongpress')
			},
			automatorTouchStart() {
				console.warn('automatorTouchStart')
			},
			automatorTouchMove() {
				console.warn('automatorTouchMove')
			},
			automatorTouchEnd(e : TouchEvent) {
				console.warn('automatorTouchEnd', e)
			},
			test() {
				uni.showActionSheet({
					itemList: ['A', 'B', 'C'],
					success: function (res) {
						console.log('showActionSheet success', res);
					},
					fail: function (res) {
						console.log(res.errMsg);
					}
				});
				// console.log('test in index')
				// this.$callMethod('myTest')
				const node = this.$querySelector('.my-test')
				console.warn('node', node)
				// const child = node.$querySelector('.test-child')
				// console.warn('child',child)
				// const fn = findVueMethod(this.$.type, this.fnName, this)
				// console.warn('fn=====================',fn == null)
			},
			getStorageInfo() {
				console.warn('method getStorageInfo')
			},
			myTest() : number {
				const sum = 2
				console.warn('my test--------------------------', sum);
				return sum;
			},
			goDetail(){
				uni.navigateTo({
					url: '/pages/detail/detail'
				})
			}
		}
	}
</script>
<style>
	@font-face {
	  font-family: AlimamaDaoLiTi;
	  src: url("https://native-res.dcloud.net.cn/uni-app-x/static/font/AlimamaDaoLiTi.ttf");
	}
	.testFont {
	  font-family: AlimamaDaoLiTi;
	}
	.component-foo {
		color: red;
	}

	.my-input {
		color: red;
		padding-left: 20px;
	}

	.border-0 {
		border: 100px dotted red;
	}

	.border-1 {
		border: 100px dotted #66ccff;
	}

	.border-2 {
		border: 100px dotted rgb(255, 0, 0);
	}

	.border-3 {
		border: 100px dotted rgba(255, 0, 0, 0.8);
	}

	.border-4 {
		border: 100px dashed red;
	}

	.border-5 {
		border: 100px dashed #66ccff;
	}

	.border-6 {
		border: 100px dashed rgb(255, 0, 0);
	}

	.border-7 {
		border: 100px dashed rgba(255, 0, 0, 0.8);
	}

	.border-8 {
		border: 100px solid red;
	}

	.border-9 {
		border: 100px solid #66ccff;
	}

	.border-10 {
		border: 100px solid rgb(255, 0, 0);
	}

	.border-11 {
		border: 100px solid rgba(255, 0, 0, 0.8);
	}

	.border-12 {
		border: 85rpx dotted red;
	}

	.border-13 {
		border: 85rpx dotted #66ccff;
	}

	.border-14 {
		border: 85rpx dotted rgb(255, 0, 0);
	}

	.border-15 {
		border: 85rpx dotted rgba(255, 0, 0, 0.8);
	}

	.border-16 {
		border: 85rpx dashed red;
	}

	.border-17 {
		border: 85rpx dashed #66ccff;
	}

	.border-18 {
		border: 85rpx dashed rgb(255, 0, 0);
	}

	.border-19 {
		border: 85rpx dashed rgba(255, 0, 0, 0.8);
	}

	.border-20 {
		border: 85rpx solid red;
	}

	.border-21 {
		border: 85rpx solid #66ccff;
	}

	.border-22 {
		border: 85rpx solid rgb(255, 0, 0);
	}

	.border-23 {
		border: 85rpx solid rgba(255, 0, 0, 0.8);
	}

	.border-24 {
		border: 20px dotted red;
	}

	.border-25 {
		border: 20px dotted #66ccff;
	}

	.border-26 {
		border: 20px dotted rgb(255, 0, 0);
	}

	.border-27 {
		border: 20px dotted rgba(255, 0, 0, 0.8);
	}

	.border-28 {
		border: 20px dashed red;
	}

	.border-29 {
		border: 20px dashed #66ccff;
	}

	.border-30 {
		border: 20px dashed rgb(255, 0, 0);
	}

	.border-31 {
		border: 20px dashed rgba(255, 0, 0, 0.8);
	}

	.border-32 {
		border: 20px solid red;
	}

	.border-33 {
		border: 20px solid #66ccff;
	}

	.border-34 {
		border: 20px solid rgb(255, 0, 0);
	}

	.border-35 {
		border: 20px solid rgba(255, 0, 0, 0.8);
	}
</style>