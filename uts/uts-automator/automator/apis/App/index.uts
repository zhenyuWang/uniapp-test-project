
import { JSONArray, JSONObject } from 'com.alibaba.fastjson'
import {
  ViewToTempFilePathSuccess,
  ViewToTempFilePathFail
} from 'io.dcloud.uniapp.runtime'
import { getCurrentPages } from 'io.dcloud.uts.framework'
import { parsePage } from '../util.uts'
import { ShowToastOptions, ShowLoadingOptions, ShowModalOptions, ShowActionSheetOptions } from "io.dcloud.uts.extapi"
import { connectSocket } from './Socket.uts'

export type GetPageStackParams = {
  callback: (result: any | null, error: any | null) => void
}
export const getPageStack = (params: GetPageStackParams): void => {
  params.callback({
    pageStack: getCurrentPages().map((page: BasePage): UTSJSONObject => {
      return parsePage(page)
    })
  }, null)
}
export type GetCurrentPageParams = {
  callback: (result: UTSJSONObject | null, error: any | null) => void
}

function _getCurrentPage(): BasePage | null {
  const pages = getCurrentPages()
  return pages.length > 0 ? pages[pages.length - 1] : null
}

export const getCurrentPage = (params: GetCurrentPageParams): void => {
  const page = _getCurrentPage()
  const result = page != null ? parsePage(page) : null
  params.callback(result, null)
}

export type CallUniMethodParams = {
  method: string
  args: JSONArray
  callback: (result: any | null, error: any | null) => void
}


export const callUniMethod = (params: CallUniMethodParams): void => {
  const method = params.method
  const args = params.args
  const callback = params.callback
  let animationType: string = 'pop-in'
  let animationDuration: number = 300
  const success = (result: any) => {
    const timeout = method == 'pageScrollTo' ? 350 : 0
    setTimeout(() => {
      callback({ result }, null)
    }, timeout)
  }
  const fail = (error: any) => {
    callback(null, error)
  }
  switch (method) {
    case 'navigateTo':
      if ((args[0] as JSONObject)['animationType'] !== null) {
        animationType = (args[0] as JSONObject)['animationType'] as string
      }
      if ((args[0] as JSONObject)['animationDuration'] !== null) {
        animationDuration = (args[0] as JSONObject)['animationDuration'] as number
      }
      uni.navigateTo({
        url: (args[0] as JSONObject)['url'] as string,
        animationType,
        animationDuration,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break

    case 'redirectTo':
      uni.redirectTo({
        url: (args[0] as JSONObject)['url'] as string,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break

    case 'reLaunch':
      uni.reLaunch({
        url: (args[0] as JSONObject)['url'] as string,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break

    case 'navigateBack':
      animationType = 'pop-out'
      if ((args[0] as JSONObject)['animationType'] !== null) {
        animationType = (args[0] as JSONObject)['animationType'] as string
      }
      if ((args[0] as JSONObject)['animationDuration'] !== null) {
        animationDuration = (args[0] as JSONObject)['animationDuration'] as number
      }
      uni.navigateBack({
        animationType,
        animationDuration,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break
    case 'switchTab':
      uni.switchTab({
        url: (args[0] as JSONObject)['url'] as string,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break
    case 'getStorage':
      uni.getStorage({
        key: (args[0] as JSONObject)['key'] as string,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break
    case 'setStorage':
      uni.setStorage({
        key: (args[0] as JSONObject)['key'] as string,
        data: (args[0] as JSONObject)['data'] as any,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break
    case 'getStorageSync':
      callback({ result: uni.getStorageSync((args[0] as string)) }, null)
      break
    case 'setStorageSync':
      uni.setStorageSync(args[0] as string, args[1] as any)
      callback({ result: { errMsg: 'uni.setStorageSync success' } }, null)
      break
    case 'getStorageInfo':
      uni.getStorageInfo({
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break
    case 'getStorageInfoSync':
      callback({ result: uni.getStorageInfoSync() }, null)
      break
    case 'removeStorage':
      uni.removeStorage({
        key: (args[0] as JSONObject)['key'] as string,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      })
      break
    case 'removeStorageSync':
      uni.removeStorageSync(args[0] as string)
      callback({ result: {} }, null)
      break
    case 'clearStorage':
      uni.clearStorage({
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        }
      })
      break
    case 'clearStorageSync':
      callback({ result: uni.clearStorageSync() }, null)
      break
    case 'showToast':
      const icon = (args[0] as JSONObject)['icon'] != null ? (args[0] as JSONObject)['icon'] as string : 'success'
      const image = (args[0] as JSONObject)['image'] != null && (args[0] as JSONObject)['image'] !== '' ? (args[0] as JSONObject)['image'] as string : null
      const toastMask = (args[0] as JSONObject)['mask'] != null ? (args[0] as JSONObject)['mask'] as boolean : false
      const duration: number = (args[0] as JSONObject)['duration'] != null ? (args[0] as JSONObject)['duration'] as number : 1500
      const position = (args[0] as JSONObject)['position'] != null ? (args[0] as JSONObject)['position'] as string : null
      uni.showToast({
        title: (args[0] as JSONObject)['title'] as string,
        icon,
        image,
        mask: toastMask,
        duration,
        position,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        }
      } as ShowToastOptions)
      break
    case 'hideToast':
      uni.hideToast()
      break
    case 'showLoading':
      const loadingMask = (args[0] as JSONObject)['mask'] != null ? (args[0] as JSONObject)['mask'] as boolean : false
      uni.showLoading({
        title: (args[0] as JSONObject)['title'] as string,
        mask: loadingMask,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        },
      } as ShowLoadingOptions)
      break
    case 'hideLoading':
      uni.hideLoading()
      break
    case 'showModal':
      const showModalTitle = (args[0] as JSONObject)['title'] != null ? (args[0] as JSONObject)['title'] as string : null
      const content = (args[0] as JSONObject)['content'] != null ? (args[0] as JSONObject)['content'] as string : null
      const showCancel = (args[0] as JSONObject)['showCancel'] != null ? (args[0] as JSONObject)['showCancel'] as boolean : true
      const cancelText = (args[0] as JSONObject)['cancelText'] != null ? (args[0] as JSONObject)['cancelText'] as string : null
      const cancelColor: string | null = (args[0] as JSONObject)['cancelColor'] != null ? (args[0] as JSONObject)['cancelColor'] as string : null
      const confirmText = (args[0] as JSONObject)['confirmText'] != null ? (args[0] as JSONObject)['confirmText'] as string : null
      const confirmColor = (args[0] as JSONObject)['confirmColor'] != null ? (args[0] as JSONObject)['confirmColor'] as string : null
      const editable = (args[0] as JSONObject)['editable'] != null ? (args[0] as JSONObject)['editable'] as boolean : false
      const placeholderText = (args[0] as JSONObject)['placeholderText'] != null ? (args[0] as JSONObject)['placeholderText'] as string : null
      uni.showModal({
        title: showModalTitle,
        content,
        showCancel,
        cancelText,
        cancelColor,
        confirmText,
        confirmColor,
        editable,
        placeholderText,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        }
      } as ShowModalOptions)
      break
    case 'showActionSheet':
      const showActionSheetTitle = (args[0] as JSONObject)['title'] != null ? (args[0] as JSONObject)['title'] as string : null
      const itemList = ((args[0] as JSONObject)['itemList'] as JSONArray).toUTSArray() as string[]
      const itemColor = (args[0] as JSONObject)['itemColor'] != null ? (args[0] as JSONObject)['itemColor'] as string : null
      uni.showActionSheet({
        title: showActionSheetTitle,
        itemList,
        itemColor,
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        }
      } as ShowActionSheetOptions)
      break
    case 'connectSocket':
      const id = (args[0] as JSONObject)['id'] as string
      const url = (args[0] as JSONObject)['url'] as string
      connectSocket(id, url, callback)
      break
    case 'getSystemInfo':
      uni.getSystemInfo({
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        }
      })
      break
    case 'getSystemInfoSync':
      callback({ result: uni.getSystemInfoSync() }, null)
      break
    case 'getDeviceInfo':
      callback({ result: uni.getDeviceInfo() }, null)
      break
    case 'getAppBaseInfo':
      callback({ result: uni.getAppBaseInfo() }, null)
      break
    case 'getAppAuthorizeSetting':
      callback({ result: uni.getAppAuthorizeSetting() }, null)
      break
    case 'openAppAuthorizeSetting':
      uni.openAppAuthorizeSetting({
        success(result: any) {
          callback({ result }, null)
        },
        fail(error: any) {
          callback(null, error)
        }
      })
      break
    default:
      callback(null, { errMsg: 'uni.' + method + ' not exists.' })
      break
  }
}

export type CaptureScreenshotParams = {
  id?: string | null,
  fullPage: boolean,
  path: string
  callback: (result: any | null, error: any | null) => void
}
export const captureScreenshot = (params: CaptureScreenshotParams): void => {
  const callback = params.callback
  const currentPage = _getCurrentPage()
  if (currentPage !== null) {
    currentPage.$viewToTempFilePath({
      id: params.fullPage ? null : params.id,
      wholeContent: params.fullPage,
      path: params.path,
      success: (res: ViewToTempFilePathSuccess) => {
        callback({
          errMsg: 'screenshot:ok',
          tempFilePath: res.tempFilePath,
          data: UTSAndroid.dcloud_private_getFileBase64(res.tempFilePath)
        }, null)
      },
      fail: (error: ViewToTempFilePathFail) => {
        callback(null, error)
      }
    })
  } else {
    callback({
      errMsg: `captureScreenshot:fail, currentPage is not found.`
    }, null)
  }
}
