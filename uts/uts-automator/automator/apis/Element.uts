import { getElementById, getElementByNodeIdOrElementId, getComponentVmBySelector, getValidNodes, getComponentVmByNodeId, componentGetData, componentSetData, getElementByIdOrNodeId } from './util.uts'
import { JSONObject } from 'com.alibaba.fastjson'
import { getChildrenText, toCamelCase } from './util.uts'

export type GetElementParams = {
  pageId: number
  nodeId?: number | null
  elementId?: string | null
  selector: string
  callback: (result: any | null, error: any | null) => void
}

export const getElement = (params: GetElementParams): void => {
  // TODO: support get component by class or id selector
  const element = getElementByNodeIdOrElementId(params.pageId, params.nodeId, params.elementId, params.callback)
  if (element !== null) {
    let selector = params.selector
    if (selector.startsWith('uni-')) {
      selector = selector.replace('uni-', '')
      const component = getComponentVmBySelector(params.pageId, selector, params.callback)
      const result = {
        nodeId: component !== null ? component.$.uid : null,
        tagName: component !== null ? selector : null,
        elementId: component !== null ? `${Date.now()}` : null
      }
      params.callback(result, null)
      return
    }
    const list: UTSJSONObject[] = []
    getValidNodes(element, selector, list)
    const result = list.length > 0 ? list[0] : null
    params.callback(result, null)
  }
}

export const getElements = (params: GetElementParams): void => {
  const element = getElementByNodeIdOrElementId(params.pageId, params.nodeId, params.elementId, params.callback)
  if (element !== null) {
    const list: UTSJSONObject[] = []
    getValidNodes(element, params.selector, list, true)
    params.callback({ elements: list }, null)
  }
}

export type GetDOMPropertiesParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  names: string[]
  callback: (result: any | null, error: any | null) => void
}

export const getDOMProperties = (params: GetDOMPropertiesParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    const properties = params.names.map((name: string): any | null => {
      if (name == 'innerText') {
        if (dom.tagName == 'text') {
          return dom.getAttribute('value')
        } else {
          return getChildrenText(dom)
        }
      }
      if (name == 'value') {
        return dom.getAttribute('value')
      }
      if (name == 'offsetWidth') {
        return dom.offsetWidth
      }
      if (name == 'offsetHeight') {
        return dom.offsetHeight
      }
      return `Element.getDOMProperties not support ${name}`
    })
    params.callback({ properties }, null)
  }
}

export type GetPropertiesParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  names: string[]
  callback: (result: any | null, error: any | null) => void
}

export const getProperties = (params: GetPropertiesParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  let component: ComponentPublicInstance | null = null
  if (params.nodeId !== null) {
    component = getComponentVmByNodeId(params.pageId, params.nodeId!, params.callback)
  }
  if (dom !== null) {
    const properties = params.names.map((name: string): any | null => {
      const attribute = dom.getAttribute(name) !== null ? dom.getAttribute(name) : component !== null ? component.$props[toCamelCase(name)] : null
      return attribute
    })
    params.callback({ properties }, null)
  }
}

export type GetAttributesParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  names: string[]
  callback: (result: any | null, error: any | null) => void
}

export const getAttributes = (params: GetAttributesParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    const attributes = params.names.map((name: string): any | null => {
      if (name == 'class') {
        return (dom.ext["classList"] as string[]).join(' ')
      }
      return dom.getAttribute(name)
    })
    params.callback({ attributes }, null)
  }
}

export type CallFunctionParams = {
  pageId: number
  elementId: string
  functionName: string
  args: any[]
  callback: (result: any | null, error: any | null) => void
}

export const callFunction = (params: CallFunctionParams): void => {
  const element = getElementById(params.pageId, params.elementId, params.callback)
  if (element !== null) {
    switch (params.functionName) {
      case 'input.input':
        element.setAttribute('value', params.args[0])
        break
    }
    params.callback({ result: `Element.callFunction success` }, null)
  }
}

export type TapParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  callback: (result: any | null, error: any | null) => void
}

export const tap = (params: TapParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    const x: number = 0
    const y: number = 0
    dom.dispatchEvent("click", MouseEvent("click", x.toFloat(), y.toFloat()))
    params.callback({ result: `Element.tap success` }, null)
  }
}

export type CallMethodParams = {
  pageId: number
  nodeId: number
  method: string
  args: any[]
  callback: (result: any | null, error: any | null) => void
}

export const callMethod = (params: CallMethodParams): void => {
  const component = getComponentVmByNodeId(params.pageId, params.nodeId, params.callback)
  if (component !== null) {
    const result = params.args.length > 0 ? component.$callMethod(params.method, params.args[0]) : component.$callMethod(params.method)
    params.callback({ result }, null)
  }
}

export type GetDataParams = {
  pageId: number
  nodeId: number
  path: string
  callback: (result: any | null, error: any | null) => void
}
export const getData = (params: GetDataParams): void => {
  const component = getComponentVmByNodeId(params.pageId, params.nodeId, params.callback)
  if (component !== null) {
    const data = componentGetData(component, params.path)
    params.callback({ data }, null)
  }
}

export type SetDataParams = {
  pageId: number
  nodeId: number
  data: UTSJSONObject
  callback: (result: any | null, error: any | null) => void
}
export const setData = (params: SetDataParams): void => {
  const component = getComponentVmByNodeId(params.pageId, params.nodeId, params.callback)
  if (component !== null) {
    componentSetData(component, params.data)
    params.callback({ result: { errMsg: 'Page.setData: ok.' } }, null)
  }
}

export type GetOffsetParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  callback: (result: any | null, error: any | null) => void
}

export const getOffset = (params: GetOffsetParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    params.callback({ left: dom.offsetLeft, top: dom.offsetTop }, null)
  }
}

export type LongpressParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  callback: (result: any | null, error: any | null) => void
}

export const longpress = (params: LongpressParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    const x: number = 0
    const y: number = 0
    dom.dispatchEvent("longpress", MouseEvent("longpress", x.toFloat(), y.toFloat()))
    params.callback({ result: `Element.longpress success` }, null)
  }
}

export type HandleTouchEventParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  eventName: string
  touches: any[],
  changedTouches: any[],
  callback: (result: any | null, error: any | null) => void
}

export const handleTouchEvent = (params: HandleTouchEventParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    const touches = getTouches(params.touches)
    const changedTouches = getTouches(params.changedTouches)
    dom.dispatchEvent(params.eventName, TouchEvent(params.eventName, touches, changedTouches))
    params.callback({ result: `Element.${params.eventName} success` }, null)
  }
}

function getTouches(touches: any[]): Touch[] {
  return touches.map((touch): Touch => {
    const touchObj = JSON.parse((touch as JSONObject).toString())!
    const result = Touch()
    result.identifier = (touchObj['identifier'] as number).toFloat()
    result.pageX = (touchObj['pageX'] as number).toFloat()
    result.pageY = (touchObj['pageY'] as number).toFloat()
    return result
  })
}

export type GetStylesParams = {
  pageId: number
  elementId?: string | null
  nodeId?: number | null
  names: string[]
  callback: (result: any | null, error: any | null) => void
}

export const getStyles = (params: GetStylesParams): void => {
  const dom = getElementByIdOrNodeId(params.pageId, params.elementId, params.nodeId, params.callback)
  if (dom !== null) {
    const styles = params.names.map((name: string): any | null => {
      return dom.style.getPropertyValue(name)
    })
    params.callback({ styles }, null)
  }
}
