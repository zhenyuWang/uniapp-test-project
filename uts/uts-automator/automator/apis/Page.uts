import { pageGetData, pageSetData, getPageVm, getValidComponentsOrNodes } from './util.uts'

export type GetDataParams = {
  pageId: number
  path: string
  callback: (result: any | null, error: any | null) => void
}
export const getData = (params: GetDataParams): void => {
  const callback = params.callback
  const page = getPageVm(params.pageId)
  if (page === null) {
    callback({ result: { errMsg: 'Page.getData:fail, Page not found.' } }, null)
    return
  }
  const data = pageGetData(page, params.path)
  callback({ data }, null)
}

export type SetDataParams = {
  pageId: number
  data: UTSJSONObject
  callback: (result: any | null, error: any | null) => void
}
export const setData = (params: SetDataParams): void => {
  const pageId = params.pageId
  const callback = params.callback
  const page = getPageVm(pageId)
  if (page !== null) {
    pageSetData(page, params.data)
    callback({ result: { errMsg: 'Page.setData: ok.' } }, null)
  } else {
    callback(null, { errMsg: `Page.setData:fail, Page:${pageId} is not found.` })
  }
}
export type CallMethodParams = {
  pageId: number
  method: string
  args: any[]
  callback: (result: any | null, error: any | null) => void
}

export const callMethod = (params: CallMethodParams): void => {
  const page = getPageVm(params.pageId)
  if (page === null) {
    params.callback(null, { errMsg: `Page[${params.pageId}] not exists` })
  } else if (findVueMethod(page.$.type, params.method, page) === null) {
    params.callback(null, { errMsg: `Page.${params.method} not exists` })
  } else {
		const result = params.args.length > 0 ? page.$callMethod(params.method, params.args[0]) : page.$callMethod(params.method)
    params.callback({ result }, null)
  }
}

export type GetElementParams = {
  pageId: number
  selector: string
  callback: (result: any | null, error: any | null) => void
}

export const getElement = (params: GetElementParams): void => {
  const page = getPageVm(params.pageId)
  if (page === null) {
    params.callback(null, { errMsg: `Page[${params.pageId}] not exists` })
  } else {
    let selector = params.selector
    if (selector.startsWith('uni-')) {
      selector = selector.replace('uni-', '')
    }
    const list: UTSJSONObject[] = []
    getValidComponentsOrNodes(page.$.subTree, selector, list)
    const result = list.length > 0 ? list[0] : null
    params.callback(result, null)
  }
}

export const getElements = (params: GetElementParams): void => {
  const page = getPageVm(params.pageId)
  if (page === null) {
    params.callback(null, { errMsg: `Page[${params.pageId}] not exists` })
  } else {
    const elements = page.$querySelectorAll(params.selector)
    const result = [] as UTSJSONObject[]
    elements?.forEach(element => {
      result.push({
        elementId: element.id,
        tagName: element.tagName
      })
    })
    params.callback({ elements: result }, null)
  }
}
