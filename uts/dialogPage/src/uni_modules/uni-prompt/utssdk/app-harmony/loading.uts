import {
    ShowLoading,
    ShowLoadingOptions,
    ShowLoadingSuccess,
    HideLoading
} from '../interface.uts';
import {
    API_SHOW_LOADING,
    ShowLoadingApiOptions,
    ShowLoadingProtocol,
    API_HIDE_LOADING
} from '../protocol.uts';
import {
    getOSRuntime,
    waitForCurrentNativePage
} from '@dcloudio/uni-runtime'

export {
    ShowLoadingOptions,
    ShowLoadingSuccess
}

interface IShowLoadingOptions {
    title: string,
    mask: boolean
}

export const showLoading: ShowLoading = defineAsyncApi<ShowLoadingOptions, ShowLoadingSuccess>(
    API_SHOW_LOADING,
    async function (options: ShowLoadingOptions, exec: ApiExecutor<ShowLoadingSuccess>) {
        waitForCurrentNativePage().then((nativePage: Object) => {
            getOSRuntime().showLoading({
                title: options.title || '',
                mask: options.mask == null ? false : options.mask,
            } as IShowLoadingOptions, nativePage)
            exec.resolve({} as ShowLoadingSuccess)
        })
    },
    ShowLoadingProtocol,
    ShowLoadingApiOptions
) as ShowLoading

export const hideLoading: HideLoading = defineSyncApi<void>(
    API_HIDE_LOADING,
    function () {
        waitForCurrentNativePage().then((nativePage: Object) => {
            getOSRuntime().hideLoading()
        })
    },
) as HideLoading
