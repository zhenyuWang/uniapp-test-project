// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DCUniToast
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import DCUniToast
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public func mc_text(_ text: Swift.String, offset: CoreFoundation.CGFloat? = nil, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension DCUniToast.MCToast {
  public static func mc_text(_ text: Swift.String, offset: CoreFoundation.CGFloat? = nil, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public func mc_remove(callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension DCUniToast.MCToast {
  public static func mc_remove(callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MCToast : ObjectiveC.NSObject {
  @objc deinit
}
extension DCUniToast.MCToast {
  public typealias MCToastCallback = () -> Swift.Void
  public enum MCToastRespond {
    case `default`
    case noRespond
    case respond
    case navBarRespond
    public static func == (a: DCUniToast.MCToast.MCToastRespond, b: DCUniToast.MCToast.MCToastRespond) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension DCUniToast.MCToast {
  public static func colorWithSystemStyle(_ darkColor: UIKit.UIColor, _ defaultColor: UIKit.UIColor) -> UIKit.UIColor
}
extension DCUniToast.MCToast {
  public enum MCToastType {
    case success
    case failure
    case warning
    public static func == (a: DCUniToast.MCToast.MCToastType, b: DCUniToast.MCToast.MCToastType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public func mc_success(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
  @_Concurrency.MainActor(unsafe) public func mc_failure(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
  @_Concurrency.MainActor(unsafe) public func mc_warning(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension DCUniToast.MCToast {
  public static func mc_success(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
  public static func mc_failure(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
  public static func mc_warning(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension DCUniToast.MCToast {
  @discardableResult
  public static func showStatus(_ type: DCUniToast.MCToast.MCToastType?, text: Swift.String, iconImage: UIKit.UIImage?, duration: CoreFoundation.CGFloat, respond: DCUniToast.MCToast.MCToastRespond, callback: DCUniToast.MCToast.MCToastCallback? = nil) -> (imageView: UIKit.UIImageView, label: UIKit.UILabel)
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public func mc_statusBar(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, font: UIKit.UIFont = MCToastConfig.shared.text.font, backgroundColor: UIKit.UIColor? = nil, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension DCUniToast.MCToast {
  public static func mc_statusBar(_ text: Swift.String, duration: CoreFoundation.CGFloat = MCToastConfig.shared.duration, font: UIKit.UIFont = MCToastConfig.shared.text.font, backgroundColor: UIKit.UIColor? = nil, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
@objc @_inheritsConvenienceInitializers public class MCToastConfig : ObjectiveC.NSObject {
  public static let shared: DCUniToast.MCToastConfig
  public var respond: DCUniToast.MCToast.MCToastRespond
  public var background: DCUniToast.MCToastConfig.Background
  public var icon: DCUniToast.MCToastConfig.Icon
  public var text: DCUniToast.MCToastConfig.Text
  public var spacing: DCUniToast.MCToastConfig.MainAreaSpacing
  public var duration: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
extension DCUniToast.MCToastConfig {
  public struct Background {
    public var color: UIKit.UIColor
    public var size: CoreFoundation.CGSize
  }
  public struct Icon {
    public var size: CoreFoundation.CGSize
    public var successImage: UIKit.UIImage?
    public var failureImage: UIKit.UIImage?
    public var warningImage: UIKit.UIImage?
  }
  public struct Text {
    public var textColor: UIKit.UIColor?
    public var font: UIKit.UIFont
    public var offset: (CoreFoundation.CGFloat)
  }
  public struct MainAreaSpacing {
    public var margin: CoreFoundation.CGFloat
    public var padding: CoreFoundation.CGFloat
  }
}
extension UIKit.UIResponder {
  @_Concurrency.MainActor(unsafe) public func mc_loading(text: Swift.String = "正在加载中", duration: CoreFoundation.CGFloat = 0, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
  @_Concurrency.MainActor(unsafe) public func mc_loading(imageNames: [UIKit.UIImage?], animationSpeed: CoreFoundation.CGFloat = 0.1, duration: CoreFoundation.CGFloat = 0, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension DCUniToast.MCToast {
  public static func mc_loading(text: Swift.String = "正在加载中", duration: CoreFoundation.CGFloat = 0, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
  public static func mc_loading(imageNames: [UIKit.UIImage?], animationSpeed: CoreFoundation.CGFloat = 0.1, duration: CoreFoundation.CGFloat = 0, respond: DCUniToast.MCToast.MCToastRespond = MCToastConfig.shared.respond, callback: DCUniToast.MCToast.MCToastCallback? = nil)
}
extension Foundation.NSString {
  public func dc_getBoundingSize(_ font: UIKit.UIFont?, _ lineHeight: CoreFoundation.CGFloat, _ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
}
extension DCUniToast.MCToast.MCToastRespond : Swift.Equatable {}
extension DCUniToast.MCToast.MCToastRespond : Swift.Hashable {}
extension DCUniToast.MCToast.MCToastType : Swift.Equatable {}
extension DCUniToast.MCToast.MCToastType : Swift.Hashable {}
